<?php namespace Daos;

use Daos\Connection as Connection;
use Daos\MeawDAO as MeawDAO;
use Daos\KittenDAO as KittenDAO;
use Daos\IDAO as IDAO;
use Models\Kitten as Kitten;
use Models\Meaw as Meaw;
use Models\ReMeaw as ReMeaw;

abstract class ReMeawDAO{

  private static $table = 're_meaws';

  // we dont need to specify the date of the remeaw because is autogenerated on the database.
  public static function Insert($meawId, $kittenId, $publishDate) {
    try {
      $stmt = Connection::Prepare("INSERT INTO ".self::$table." (id_meaw, id_kitten, re_meaw_date) VALUES (?, ?, ?)");
      $stmt->execute(array(
        $meawId,
        $kittenId,
        $publishDate
      ));
    } catch (\PDOException $e) {
      throw $e;
    }
  }

  public static function Delete($id_meaw, $id_kitten) {
    try {
      $stmt = Connection::Prepare("DELETE FROM ".self::$table." WHERE id_kitten = ? AND id_meaw = ?");
      $stmt->execute(array(
        $id_kitten,
        $id_meaw
      ));
    } catch (\PDOException $e) {
      throw $e;
    }
  }

public static function SelectAll() {
	try {
      $list = array();
      $stmt = Connection::Prepare("SELECT id_kitten, id_meaw, re_meaw_date FROM ".self::$table);
      
      if ($stmt->execute()) {
        while ($result = $stmt->fetch()) {
          $kitten = KittenDAO::SelectByID($result['id_kitten']);
          $meaw = MeawDAO::SelectByID($result['id_meaw']);
          $reMeaw = new ReMeaw($meaw, $kitten, $result['re_meaw_date']);

          array_push($list, $reMeaw);
        }
      }
    } catch (\PDOException $e) {
      throw $e;
    }
    return $list;
  }

  // Returns all remeaws of an specific meaw.
  public static function SelectAllFromMeaw($id_meaw) {
    try {
      $list = array();
      $stmt = Connection::Prepare("SELECT id_kitten, id_meaw, re_meaw_date FROM ".self::$table." WHERE id_meaw = ?");
      
      if ($stmt->execute(array($id_meaw))) {
        while ($result = $stmt->fetch()) {
          $kitten = KittenDAO::SelectByID($result['id_kitten']);
          $meaw = MeawDAO::SelectByID($result['id_meaw']);
          $reMeaw = new ReMeaw($meaw, $kitten, $result['re_meaw_date']);

          array_push($list, $reMeaw);
        }
      }
    } catch (\PDOException $e) {
      throw $e;
    }
    return $list;
  }

  public static function selectByReMeaw($id_meaw, $id_kitten){

      $list = array();
    try{
      $stmt = Connection::Prepare("SELECT id_kitten, id_meaw, re_meaw_date FROM ".self::$table." WHERE id_meaw = ? AND id_kitten = ?");
      $reMeaw = null;
      if ($stmt->execute(array($id_meaw, $id_kitten))) {
        if ($result = $stmt->fetch()) {
          $kitten = KittenDAO::SelectByID($result['id_kitten']);
          $meaw = MeawDAO::SelectByID($result['id_meaw']);
          $reMeaw = new ReMeaw($meaw, $kitten, $result['re_meaw_date']);
        }
      }
    } catch (\PDOException $e) {
      throw $e;
    }
    return $reMeaw;
  }

  public static function SelectByID($id) {
    throw new \Exception("Not supported by our application yet.", 1);
  }


  public static function Update($object) {

    $idKitten = $object->getKitten()->getIdKitten();
    $idMeaw = $object->getMeaw->getId();
    try{
    $stmt = Connection::Prepare("UPDATE ".self::$table. 
                                  " SET re_meaw_date = ".$object->getDate(). 
                                " WHERE id_meaw = ".$idMeaw." AND id_kitten = ".$idKitten);
    } catch(\PDOException $e){
      throw $e;
    }
  }
}
?>